{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"preview.html","title":"Preview","text":""},{"location":"preview.html#article-preview","title":"Article Preview","text":"<p>Information for contributors  # Example article  $$a^2 + b^2 = c^2$$  ```cpp int gcd (int a, int b) {     if (b == 0)         return a;     else         return gcd (b, a % b); } ``` Preview (Ctrl + Enter) <p></p> <p></p>"},{"location":"tags.html","title":"Tags","text":"<p>This file contains a global index of all tags used on the pages.</p>"},{"location":"cs/bs.html","title":"Backtracing","text":"<p>also called recursive backtracing. may be called \"clever brute force\" (i don't know)</p>"},{"location":"cs/bs.html#remember-things","title":"Remember things","text":"<ul> <li>satisfied some constraints.</li> <li>explicit and implicit constriants.</li> <li>brute force make explicit n\u00b2 </li> <li>bound function make imlicit n!</li> <li>live node</li> <li>E node</li> <li>dead node</li> <li>answer node</li> </ul>"},{"location":"cs/bs.html#n-queen-psudocode","title":"N-Queen Psudocode","text":"PlaceNqueen <pre><code>place(k,i)\nfor j = 1 to k-1 \n    if x[j]=i or Abs(x[j]-i) = Abs(j-k)\n         do return false\nreturn true\n</code></pre> <pre><code>Nqueen(k,n)\nfor i = 1 to k\n    if place(k,i)\n        then x[k] = i\n             if k = n\n               do write  x[1:n]\n             else\n               Nqueen(k+1,n) \n</code></pre>"},{"location":"cs/bs.html#n-queen-implement","title":"N-Queen Implement","text":"Python(place)Python(Nqueen)Python(full code) <pre><code>def place(k,i):\nfor j in range(1,k):\n    if x[j] == i or abs(x[j]-i) == abs(j-k):\n        return False\nreturn True\n</code></pre> <pre><code>def nqueen(k,n):\nfor i in range(1,n+1):\n    if place(k,i):\n        x[k]=i\n        if k==n:\n            print(x[1:n+1])\n        else:\n            nqueen(k+1,n)\n</code></pre> <pre><code>def place(k,i):\nfor j in range(1,k):\n    if x[j] == i or abs(x[j]-i) == abs(j-k):\n        return False\nreturn True\ndef nqueen(k,n):\nfor i in range(1,n+1):\n    if place(k,i):\n        x[k]=i\n        if k==n:\n            print(x[1:n+1])\n        else:\n            nqueen(k+1,n)\nn=int(input())\nx=[0]*(n+1)\nnqueen(1,n)\n</code></pre>"},{"location":"cs/bs.html#related-problems","title":"Related Problems","text":"<ul> <li>UVa 725 - Division</li> </ul>"},{"location":"recursion/toh.html","title":"\u09b9\u09cd\u09af\u09be\u09a8\u09df\u09c7\u09b0 \u099f\u09be\u0993\u09df\u09be\u09b0 \u09b8\u09ae\u09b8\u09cd\u09af\u09be","text":"<p>Pre-requisite topic: - Recursion - Stack</p> <p>Tower of Hanoy \u09ac\u09be \u09b9\u09cd\u09af\u09be\u09a8\u09af\u09bc\u09c7\u09b0 \u099f\u09be\u0993\u09af\u09bc\u09be\u09b0 \u098f\u09ae\u09a8 \u098f\u0995\u099f\u09bf \u09aa\u09be\u099c\u09b2 \u09af\u09c7\u0996\u09be\u09a8\u09c7 \u09b8\u09be\u09a7\u09be\u09b0\u09a8\u09a4 \u09a4\u09bf\u09a8\u099f\u09bf \u0996\u09c1\u0981\u099f\u09bf \u098f\u09ac\u0982 \u09ac\u09bf\u09ad\u09bf\u09a8\u09cd\u09a8 \u0986\u0995\u09be\u09b0\u09c7\u09b0 \u0995\u09bf\u099b\u09c1 \u09b8\u0982\u0996\u09cd\u09af\u09be\u0995 \u09a1\u09bf\u09b8\u09cd\u0995 \u09b8\u09cd\u099f\u09cd\u09af\u09be\u0995 \u0986\u0995\u09be\u09b0\u09c7 \u09b8\u09be\u099c\u09be\u09a8\u09cb \u09a5\u09be\u0995\u09c7\u0964 \u098f\u0987 \u09aa\u09be\u099c\u09b2\u09c7\u09b0 \u09ae\u09c2\u09b2 \u0989\u09a6\u09cd\u09a6\u09c7\u09b6\u09cd\u09af \u09b9\u09b2 \u09b8\u09ae\u09cd\u09aa\u09c2\u09b0\u09cd\u09a3 \u09b8\u09cd\u099f\u09cd\u09af\u09be\u0995\u099f\u09bf\u0995\u09c7 \u09aa\u09cd\u09b0\u09a5\u09ae \u0996\u09c1\u0981\u099f\u09bf \u09a5\u09c7\u0995\u09c7 \u09a4\u09c3\u09a4\u09c0\u09df \u0996\u09c1\u0981\u099f\u09bf\u09a4\u09c7 \u09a8\u09bf\u09af\u09bc\u09c7 \u09af\u09be\u0993\u09df\u09be\u0964 \u09a4\u09ac\u09c7 \u09a1\u09bf\u09b8\u09cd\u0995 \u09b8\u09b0\u09be\u09a8\u09c7\u09be\u09b0 \u0995\u09cd\u09b7\u09c7\u09a4\u09cd\u09b0\u09c7 \u0995\u09df\u09c7\u0995\u099f\u09bf \u09ac\u09cd\u09af\u09be\u09aa\u09be\u09b0 \u09ae\u09be\u09a5\u09be\u09df \u09b0\u09be\u0996\u09a4\u09c7 \u09b9\u09ac\u09c7:-  - \u098f\u0995\u09ac\u09be\u09b0\u09c7 \u09b6\u09c1\u09a7\u09c1\u09ae\u09be\u09a4\u09cd\u09b0 \u098f\u0995\u099f\u09bf \u09a1\u09bf\u09b8\u09cd\u0995 \u09b8\u09b0\u09be\u09a8\u09cb \u09af\u09be\u09ac\u09c7\u0964 - \u09aa\u09cd\u09b0\u09a4\u09bf\u099f\u09bf \u09aa\u09a6\u0995\u09cd\u09b7\u09c7\u09aa\u09c7 \u098f\u0995\u099f\u09bf \u09b8\u09cd\u099f\u09cd\u09af\u09be\u0995\u09c7\u09b0 \u0989\u09aa\u09b0\u09c7\u09b0 \u09a1\u09bf\u09b8\u09cd\u0995\u099f\u09bf \u09a8\u09c7\u0993\u09af\u09bc\u09be \u09af\u09be\u09ac\u09c7 \u098f\u09ac\u0982 \u098f\u099f\u09bf\u0995\u09c7 \u0985\u09a8\u09cd\u09af \u09b8\u09cd\u099f\u09cd\u09af\u09be\u0995\u09c7\u09b0 \u0989\u09aa\u09b0\u09c7 \u09ac\u09be \u098f\u0995\u099f\u09bf \u0996\u09be\u09b2\u09bf \u09ae\u09c7\u09b0\u09c1\u09a4\u09c7 \u09b8\u09cd\u09a5\u09be\u09aa\u09a8 \u0995\u09b0\u09be \u09af\u09be\u09ac\u09c7\u0964  - \u098f\u0995\u099f\u09bf \u099b\u09cb\u099f \u09a1\u09bf\u09b8\u09cd\u0995\u09c7\u09b0 \u0989\u09aa\u09b0\u09c7 \u0995\u09cb\u09a8 \u09ac\u09dc \u09a1\u09bf\u09b8\u09cd\u0995 \u09b8\u09cd\u09a5\u09be\u09aa\u09a8 \u0995\u09b0\u09be \u09af\u09be\u09ac\u09c7 \u09a8\u09be\u0964 </p> <p>\u098f\u0987 \u09aa\u09be\u099c\u09b2\u099f\u09bf \u09b8\u09ae\u09be\u09a7\u09be\u09a8 \u0995\u09b0\u09be\u09b0 \u099c\u09a8\u09cd\u09af \u0986\u09ae\u09b0\u09be \u098f\u0995\u099f\u09bf \u09b0\u09bf\u0995\u09be\u09b0\u09cd\u09b8\u09bf\u09ad \u0985\u09cd\u09af\u09be\u09b2\u0997\u09b0\u09bf\u09a6\u09ae \u09ac\u09cd\u09af\u09ac\u09b9\u09be\u09b0 \u0995\u09b0\u09a4\u09c7 \u09aa\u09be\u09b0\u09bf\u0964 </p>"},{"location":"recursion/toh.html#_2","title":"\u0985\u09cd\u09af\u09be\u09b2\u0997\u09b0\u09bf\u09a6\u09ae","text":"<ul> <li>\u09a7\u09be\u09aa \u09e7: n-1 \u09b8\u0982\u0996\u09cd\u09af\u0995 \u09a1\u09bf\u09b8\u09cd\u0995 \u09b8\u09cb\u09b0\u09cd\u09b8 \u09a5\u09c7\u0995\u09c7 \u0985\u09a4\u09bf\u09b0\u09bf\u0995\u09cd\u09a4 \u09aa\u09bf\u09b2\u09be\u09b0\u09c7 \u09b0\u09be\u0996\u09be\u0964</li> <li>\u09a7\u09be\u09aa \u09e8: n \u09a4\u09ae \u09a1\u09bf\u09b8\u09cd\u0995 \u09b8\u09cb\u09b0\u09cd\u09b8 \u09a5\u09c7\u0995\u09c7 \u099f\u09be\u09b0\u09cd\u0997\u09c7\u099f \u09aa\u09bf\u09b2\u09be\u09b0\u09c7 \u09b0\u09be\u0996\u09be\u0964</li> <li>\u09a7\u09be\u09aa \u09e9: n-1 \u09b8\u0982\u0996\u09cd\u09af\u0995 \u09a1\u09bf\u09b8\u09cd\u0995  \u0985\u09a4\u09bf\u09b0\u09bf\u0995\u09cd\u09a4 \u09aa\u09bf\u09b2\u09be\u09b0 \u09a5\u09c7\u0995\u09c7 \u099f\u09be\u09b0\u09cd\u0997\u09c7\u099f\u09c7 \u09b0\u09be\u0996\u09be\u0964 </li> </ul>"},{"location":"recursion/toh.html#_3","title":"\u09b8\u09c1\u09a1\u09cb\u0995\u09cb\u09a1","text":"<p><pre><code>Procedure move(disks,source,target,extrapole)\nif disks &gt; 1 then do\n# move n-1 disks to extrapole from source.\nmove(disks-1,source,extrapole,target) // head recursion\nwrite source to new_target\nif disks = 1 then do\n# move n-th disk to target from source.\nwrite source to target\nif disks &gt;1 then do\n# move n-1 disks to target from ectrapole.\nmove(disks-1,extrapole,target,source) // tail recursion\nEND\n</code></pre> </p>"},{"location":"recursion/toh.html#_4","title":"\u0987\u09ae\u09cd\u09aa\u09cd\u09b2\u09bf\u09ae\u09c7\u09a8\u09cd\u099f","text":"CC++PythonJava <pre><code>void move(int n,char a,char b,char c)\n{\nif(n&gt;1)\n{\nmove(n-1,a,c,b);\nprintf(\"%c to %c\\n\",a,b);\n}\nif(n==1)\n{\nprintf(\"%c to %c\\n\",a,b);\n}\nif(n&gt;1)\n{\nmove(n-1,c,b,a);\n}\n}\n</code></pre> <pre><code>void move(int n,char a,char b,char c)\n{\nif(n&gt;1)\n{\nmove(n-1,a,c,b);\ncout&lt;&lt;a&lt;&lt;\" to \"&lt;&lt;b&lt;&lt;endl;\n}\nif(n==1)\n{\ncout&lt;&lt;a&lt;&lt;\" to \"&lt;&lt;b&lt;&lt;endl;\n}\nif(n&gt;1)\n{\nmove(n-1,c,b,a);\n}\n}\n</code></pre> <pre><code>def move(n,a,b,c):\nif n&gt;1:\n    move(n-1,a,c,b)\n    print(a+\" to \"+b)\nif n==1:\n    print(a+\" to \"+b)\nif n&gt;1:\n    move(n-1,c,b,a)\n</code></pre> <pre><code>public static void move(int n,char a,char b,char c)\n{\n\nif (n &gt; 1)\n{\nmove(n - 1, a, c, b);\nSystem.out.println(a+\" to \"+b);\n\n}\nif (n == 1)\n{\nSystem.out.println(a+\" to \"+b);\n\n}\nif (n &gt; 1)\n{\nmove(n - 1, c, b, a);\n}\n}\n</code></pre>"},{"location":"recursion/toh.html#_5","title":"\u09b8\u09cd\u09aa\u09c7\u09b8/ \u099f\u09be\u0987\u09ae \u0995\u09ae\u09cd\u09aa\u09cd\u09b2\u09c7\u0995\u09cd\u09b8\u09bf\u099f\u09bf","text":"<p>\u099f\u09be\u0987\u09ae \u0995\u09ae\u09cd\u09aa\u09cd\u09b2\u09c7\u0995\u09cd\u09b8\u09bf\u099f\u09bf: O(2^n) \u09b8\u09cd\u09aa\u09c7\u09b8 \u0995\u09ae\u09cd\u09aa\u09cd\u09b2\u09c7\u0995\u09cd\u09b8\u09bf\u099f\u09bf: O(n)</p>"},{"location":"recursion/toh.html#_6","title":"\u0995\u09bf\u099b\u09c1 \u09b8\u09ae\u09b8\u09cd\u09af\u09be \u0993 \u09b8\u09ae\u09be\u09a7\u09be\u09a8","text":"<ul> <li>UVa 254 - Towers of Hanoi</li> <li>UVa 10276 - Hanoi Tower Troubles Again!</li> </ul>"},{"location":"tags.html","title":"Tags","text":"<p>This file contains a global index of all tags used on the pages.</p>"}]}